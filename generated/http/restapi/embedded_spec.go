// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json",
    "text/plain"
  ],
  "swagger": "2.0",
  "info": {
    "description": "HTTP API for the server component of release-manager.",
    "title": "Release manager server API",
    "version": "0.1.0"
  },
  "paths": {
    "/artifact/create": {
      "post": {
        "security": [
          {
            "artifactAuthorizationToken": []
          }
        ],
        "description": "Create a new artifact",
        "produces": [
          "application/json"
        ],
        "tags": [
          "release"
        ],
        "parameters": [
          {
            "description": "The artifact to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateArtifactRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateArtifactResponse"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string",
                "description": "Allowed origins"
              }
            }
          },
          "404": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/describe/artifact/{service}": {
      "get": {
        "description": "Get artifacts for service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "status"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Service to find artifacts for",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "Number of artifacts to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Only return artifacts from this branch",
            "name": "branch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Artifacts for service",
            "schema": {
              "$ref": "#/definitions/DescribeArtifactResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/describe/latest-artifact/{service}": {
      "get": {
        "description": "Get latest artifacts for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "status"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Service to find artifact for",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Branch artifact originates from",
            "name": "branch",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Latest artifact for service",
            "schema": {
              "$ref": "#/definitions/DescribeArtifactResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/describe/release/{service}/{environment}": {
      "get": {
        "description": "Get releases in environment",
        "produces": [
          "application/json"
        ],
        "tags": [
          "status"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Service to find releases for",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Environment to get release for",
            "name": "environment",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "Number of releases to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Namespace to find service in",
            "name": "namespace",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Current release in environment",
            "schema": {
              "$ref": "#/definitions/DescribeReleaseResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "security": [],
        "description": "Get a pong",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "internal"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/policies": {
      "get": {
        "description": "Get policies for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Service to find policies for",
            "name": "service",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Found policies",
            "schema": {
              "$ref": "#/definitions/GetPoliciesResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete one or more policies for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "description": "The policies to delete",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policies deleted",
            "schema": {
              "$ref": "#/definitions/DeletePoliciesResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/policy/auto-release": {
      "patch": {
        "description": "Apply an auto-release policy",
        "produces": [
          "application/json"
        ],
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "description": "The auto-release policy to apply",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplyAutoReleasePolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Policy applied",
            "schema": {
              "$ref": "#/definitions/ApplyAutoReleasePolicyResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/policy/branch-restriction": {
      "patch": {
        "description": "Apply a branch restriction policy",
        "produces": [
          "application/json"
        ],
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "description": "The branch restriction policy to apply",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplyBranchRestrictionPolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Policy applied",
            "schema": {
              "$ref": "#/definitions/ApplyBranchRestrictionPolicyResponce"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/release": {
      "post": {
        "description": "Release an artifact",
        "produces": [
          "application/json"
        ],
        "tags": [
          "release"
        ],
        "parameters": [
          {
            "description": "The release to perform",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReleaseResponse"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string",
                "description": "Allowed origins"
              }
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "description": "Get current release status for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "status"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Namespace to find release in",
            "name": "namespace",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Service to find releases for",
            "name": "service",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Status found",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/webhook/daemon/k8s/deploy": {
      "post": {
        "security": [
          {
            "daemonAuthorizationToken": []
          }
        ],
        "description": "Daemon webhook for kubernetes deployment events",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "description": "Kubernetes deployment event payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DaemonKubernetesDeploymentWebhookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyWebhookResponse"
            }
          }
        }
      }
    },
    "/webhook/daemon/k8s/error": {
      "post": {
        "security": [
          {
            "daemonAuthorizationToken": []
          }
        ],
        "description": "Daemon webhook for kubernetes error events",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "description": "Kubernetes error event payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DaemonKubernetesErrorWebhookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyWebhookResponse"
            }
          }
        }
      }
    },
    "/webhook/daemon/k8s/joberror": {
      "post": {
        "security": [
          {
            "daemonAuthorizationToken": []
          }
        ],
        "description": "Daemon webhook for kubernetes job error events",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "description": "Kubernetes job error event payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DaemonKubernetesJobErrorWebhookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyWebhookResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/webhook/github": {
      "post": {
        "security": [],
        "description": "GitHub webhook endpoint. This is modeled after the GitHub webhook API. See payloads at https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads\n",
        "tags": [
          "webhook"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApplyAutoReleasePolicyRequest": {
      "description": "Apply an auto-release policy",
      "type": "object",
      "required": [
        "service",
        "branch",
        "environment",
        "committerName",
        "committerEmail"
      ],
      "properties": {
        "branch": {
          "type": "string"
        },
        "committerEmail": {
          "type": "string"
        },
        "committerName": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "ApplyAutoReleasePolicyResponse": {
      "description": "Auto release policy applied",
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "ApplyBranchRestrictionPolicyRequest": {
      "description": "Apply a branch restriction policy",
      "type": "object",
      "required": [
        "service",
        "branchRegex",
        "environment",
        "committerName",
        "committerEmail"
      ],
      "properties": {
        "branchRegex": {
          "type": "string"
        },
        "committerEmail": {
          "type": "string"
        },
        "committerName": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "ApplyBranchRestrictionPolicyResponce": {
      "description": "Branch restriction policy applied",
      "type": "object",
      "properties": {
        "branchRegex": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "Artifact": {
      "description": "An artifact specification",
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/Repository"
        },
        "ci": {
          "type": "object",
          "properties": {
            "end": {
              "type": "string"
            },
            "jobUrl": {
              "type": "string"
            },
            "start": {
              "type": "string"
            }
          }
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "shuttle": {
          "type": "object",
          "properties": {
            "plan": {
              "$ref": "#/definitions/Repository"
            },
            "shuttleVersion": {
              "type": "string"
            }
          }
        },
        "squad": {
          "type": "string"
        }
      }
    },
    "CreateArtifactRequest": {
      "description": "Create artifact payload",
      "type": "object",
      "required": [
        "md5",
        "artifact"
      ],
      "properties": {
        "artifact": {
          "type": "object",
          "required": [
            "service",
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "service": {
              "type": "string"
            }
          }
        },
        "md5": {
          "type": "string"
        }
      }
    },
    "CreateArtifactResponse": {
      "description": "Artifact created",
      "type": "object",
      "properties": {
        "artifactUploadUrl": {
          "description": "URL to upload the artifact to",
          "type": "string"
        }
      }
    },
    "DaemonKubernetesDeploymentWebhookRequest": {
      "description": "Daemon webhook with kubernetes deployment event",
      "type": "object",
      "properties": {
        "artifactId": {
          "type": "string"
        },
        "authorEmail": {
          "type": "string"
        },
        "availablePods": {
          "type": "integer"
        },
        "desiredPods": {
          "type": "integer"
        },
        "environment": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        }
      }
    },
    "DaemonKubernetesErrorWebhookRequest": {
      "description": "Daemon webhook with kubernetes error event",
      "type": "object",
      "properties": {
        "artifactId": {
          "type": "string"
        },
        "authorEmail": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "errorMessage": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          }
        },
        "namespace": {
          "type": "string"
        },
        "podName": {
          "type": "string"
        }
      }
    },
    "DaemonKubernetesJobErrorWebhookRequest": {
      "description": "Daemon webhook with kubernetes job error event",
      "type": "object",
      "properties": {
        "artifactId": {
          "type": "string"
        },
        "authorEmail": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "reason": {
                "type": "string"
              }
            }
          }
        },
        "jobName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "DeletePoliciesResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "DeletePolicyRequest": {
      "description": "Policies to delete",
      "type": "object",
      "required": [
        "service",
        "committerName",
        "committerEmail",
        "policyIds"
      ],
      "properties": {
        "committerEmail": {
          "type": "string"
        },
        "committerName": {
          "type": "string"
        },
        "policyIds": {
          "type": "array",
          "items": {
            "type": "string",
            "minItems": 1
          }
        },
        "service": {
          "type": "string"
        }
      }
    },
    "DescribeArtifactResponse": {
      "description": "Description of artifacts",
      "type": "object",
      "properties": {
        "artifacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Artifact"
          }
        },
        "service": {
          "type": "string"
        }
      }
    },
    "DescribeReleaseResponse": {
      "description": "Description of releases in an environment",
      "type": "object",
      "properties": {
        "environment": {
          "type": "string"
        },
        "releases": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "artifact": {
                "$ref": "#/definitions/Artifact"
              },
              "intent": {
                "$ref": "#/definitions/Intent"
              },
              "releaseIndex": {
                "type": "integer"
              },
              "releasedAt": {
                "type": "string",
                "format": "date"
              },
              "releasedByEmail": {
                "type": "string"
              },
              "releasedByName": {
                "type": "string"
              }
            }
          }
        },
        "service": {
          "type": "string"
        }
      }
    },
    "EmptyWebhookResponse": {
      "description": "Daemo webhook processed",
      "type": "object"
    },
    "EnvironmentStatus": {
      "type": "object",
      "properties": {
        "author": {
          "type": "string"
        },
        "buildUrl": {
          "type": "string"
        },
        "committer": {
          "type": "string"
        },
        "date": {
          "description": "Epoch timestamp",
          "type": "integer"
        },
        "highVulnerabilities": {
          "type": "integer"
        },
        "lowVulnerabilities": {
          "type": "integer"
        },
        "mediumVulnerabilities": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "description": "Generic error response",
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        }
      }
    },
    "GetPoliciesResponse": {
      "description": "List of policies on a service",
      "properties": {
        "autoReleases": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "branch": {
                "type": "string"
              },
              "environment": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            }
          }
        },
        "branchRestrictions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "branchRegex": {
                "type": "string"
              },
              "environment": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            }
          }
        },
        "service": {
          "type": "string"
        }
      }
    },
    "Intent": {
      "description": "An action intent",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "promote": {
          "type": "object",
          "properties": {
            "fromEnvironment": {
              "type": "string"
            }
          }
        },
        "releaseBranch": {
          "type": "object",
          "properties": {
            "branch": {
              "type": "string"
            }
          }
        },
        "rollback": {
          "type": "object",
          "properties": {
            "previousArtifactId": {
              "type": "string"
            }
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ReleaseRequest": {
      "description": "A release to perform",
      "required": [
        "service",
        "environment",
        "committerName",
        "committerEmail",
        "artifactId"
      ],
      "properties": {
        "artifactId": {
          "type": "string"
        },
        "committerEmail": {
          "type": "string"
        },
        "committerName": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/Intent"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "ReleaseResponse": {
      "description": "Result of a release request",
      "type": "object",
      "properties": {
        "releaseId": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "toEnvironment": {
          "type": "string"
        }
      }
    },
    "Repository": {
      "description": "Git repository details",
      "type": "object",
      "properties": {
        "authorEmail": {
          "type": "string"
        },
        "authorName": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "committerEmail": {
          "type": "string"
        },
        "committerName": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "StatusResponse": {
      "description": "Current releases for a service",
      "type": "object",
      "properties": {
        "defaultNamespaces": {
          "type": "boolean"
        },
        "dev": {
          "$ref": "#/definitions/EnvironmentStatus"
        },
        "prod": {
          "$ref": "#/definitions/EnvironmentStatus"
        },
        "staging": {
          "$ref": "#/definitions/EnvironmentStatus"
        }
      }
    }
  },
  "responses": {
    "AccessTokenNotFound": {
      "description": "The provided access token was not found.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  },
  "securityDefinitions": {
    "artifactAuthorizationToken": {
      "description": "Authorization token formatted as 'Bearer \u003ctoken\u003e'",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "daemonAuthorizationToken": {
      "description": "Authorization token formatted as 'Bearer \u003ctoken\u003e'",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "hamctlAuthorizationToken": {
      "description": "Authorization token formatted as 'Bearer \u003ctoken\u003e'",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "hamctlAuthorizationToken": []
    }
  ],
  "tags": [
    {
      "name": "policies"
    },
    {
      "name": "status"
    },
    {
      "name": "webhook"
    },
    {
      "name": "release"
    },
    {
      "name": "internal"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json",
    "text/plain"
  ],
  "swagger": "2.0",
  "info": {
    "description": "HTTP API for the server component of release-manager.",
    "title": "Release manager server API",
    "version": "0.1.0"
  },
  "paths": {
    "/artifact/create": {
      "post": {
        "security": [
          {
            "artifactAuthorizationToken": []
          }
        ],
        "description": "Create a new artifact",
        "produces": [
          "application/json"
        ],
        "tags": [
          "release"
        ],
        "parameters": [
          {
            "description": "The artifact to create",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateArtifactRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CreateArtifactResponse"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string",
                "description": "Allowed origins"
              }
            }
          },
          "404": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/describe/artifact/{service}": {
      "get": {
        "description": "Get artifacts for service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "status"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Service to find artifacts for",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "Number of artifacts to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Only return artifacts from this branch",
            "name": "branch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Artifacts for service",
            "schema": {
              "$ref": "#/definitions/DescribeArtifactResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/describe/latest-artifact/{service}": {
      "get": {
        "description": "Get latest artifacts for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "status"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Service to find artifact for",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Branch artifact originates from",
            "name": "branch",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Latest artifact for service",
            "schema": {
              "$ref": "#/definitions/DescribeArtifactResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/describe/release/{service}/{environment}": {
      "get": {
        "description": "Get releases in environment",
        "produces": [
          "application/json"
        ],
        "tags": [
          "status"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Service to find releases for",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Environment to get release for",
            "name": "environment",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "Number of releases to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Namespace to find service in",
            "name": "namespace",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Current release in environment",
            "schema": {
              "$ref": "#/definitions/DescribeReleaseResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "security": [],
        "description": "Get a pong",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "internal"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/policies": {
      "get": {
        "description": "Get policies for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Service to find policies for",
            "name": "service",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Found policies",
            "schema": {
              "$ref": "#/definitions/GetPoliciesResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete one or more policies for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "description": "The policies to delete",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeletePolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policies deleted",
            "schema": {
              "$ref": "#/definitions/DeletePoliciesResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/policy/auto-release": {
      "patch": {
        "description": "Apply an auto-release policy",
        "produces": [
          "application/json"
        ],
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "description": "The auto-release policy to apply",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplyAutoReleasePolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Policy applied",
            "schema": {
              "$ref": "#/definitions/ApplyAutoReleasePolicyResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/policy/branch-restriction": {
      "patch": {
        "description": "Apply a branch restriction policy",
        "produces": [
          "application/json"
        ],
        "tags": [
          "policies"
        ],
        "parameters": [
          {
            "description": "The branch restriction policy to apply",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplyBranchRestrictionPolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Policy applied",
            "schema": {
              "$ref": "#/definitions/ApplyBranchRestrictionPolicyResponce"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/release": {
      "post": {
        "description": "Release an artifact",
        "produces": [
          "application/json"
        ],
        "tags": [
          "release"
        ],
        "parameters": [
          {
            "description": "The release to perform",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReleaseResponse"
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string",
                "description": "Allowed origins"
              }
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "description": "Get current release status for a service",
        "produces": [
          "application/json"
        ],
        "tags": [
          "status"
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Namespace to find release in",
            "name": "namespace",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Service to find releases for",
            "name": "service",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Status found",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/webhook/daemon/k8s/deploy": {
      "post": {
        "security": [
          {
            "daemonAuthorizationToken": []
          }
        ],
        "description": "Daemon webhook for kubernetes deployment events",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "description": "Kubernetes deployment event payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DaemonKubernetesDeploymentWebhookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyWebhookResponse"
            }
          }
        }
      }
    },
    "/webhook/daemon/k8s/error": {
      "post": {
        "security": [
          {
            "daemonAuthorizationToken": []
          }
        ],
        "description": "Daemon webhook for kubernetes error events",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "description": "Kubernetes error event payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DaemonKubernetesErrorWebhookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyWebhookResponse"
            }
          }
        }
      }
    },
    "/webhook/daemon/k8s/joberror": {
      "post": {
        "security": [
          {
            "daemonAuthorizationToken": []
          }
        ],
        "description": "Daemon webhook for kubernetes job error events",
        "tags": [
          "webhook"
        ],
        "parameters": [
          {
            "description": "Kubernetes job error event payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DaemonKubernetesJobErrorWebhookRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmptyWebhookResponse"
            }
          },
          "500": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/webhook/github": {
      "post": {
        "security": [],
        "description": "GitHub webhook endpoint. This is modeled after the GitHub webhook API. See payloads at https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads\n",
        "tags": [
          "webhook"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid payload",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApplyAutoReleasePolicyRequest": {
      "description": "Apply an auto-release policy",
      "type": "object",
      "required": [
        "service",
        "branch",
        "environment",
        "committerName",
        "committerEmail"
      ],
      "properties": {
        "branch": {
          "type": "string"
        },
        "committerEmail": {
          "type": "string"
        },
        "committerName": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "ApplyAutoReleasePolicyResponse": {
      "description": "Auto release policy applied",
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "ApplyBranchRestrictionPolicyRequest": {
      "description": "Apply a branch restriction policy",
      "type": "object",
      "required": [
        "service",
        "branchRegex",
        "environment",
        "committerName",
        "committerEmail"
      ],
      "properties": {
        "branchRegex": {
          "type": "string"
        },
        "committerEmail": {
          "type": "string"
        },
        "committerName": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "ApplyBranchRestrictionPolicyResponce": {
      "description": "Branch restriction policy applied",
      "type": "object",
      "properties": {
        "branchRegex": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "Artifact": {
      "description": "An artifact specification",
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/Repository"
        },
        "ci": {
          "type": "object",
          "properties": {
            "end": {
              "type": "string"
            },
            "jobUrl": {
              "type": "string"
            },
            "start": {
              "type": "string"
            }
          }
        },
        "id": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "shuttle": {
          "type": "object",
          "properties": {
            "plan": {
              "$ref": "#/definitions/Repository"
            },
            "shuttleVersion": {
              "type": "string"
            }
          }
        },
        "squad": {
          "type": "string"
        }
      }
    },
    "ArtifactCi": {
      "type": "object",
      "properties": {
        "end": {
          "type": "string"
        },
        "jobUrl": {
          "type": "string"
        },
        "start": {
          "type": "string"
        }
      }
    },
    "ArtifactShuttle": {
      "type": "object",
      "properties": {
        "plan": {
          "$ref": "#/definitions/Repository"
        },
        "shuttleVersion": {
          "type": "string"
        }
      }
    },
    "CreateArtifactRequest": {
      "description": "Create artifact payload",
      "type": "object",
      "required": [
        "md5",
        "artifact"
      ],
      "properties": {
        "artifact": {
          "type": "object",
          "required": [
            "service",
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "service": {
              "type": "string"
            }
          }
        },
        "md5": {
          "type": "string"
        }
      }
    },
    "CreateArtifactRequestArtifact": {
      "type": "object",
      "required": [
        "service",
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "CreateArtifactResponse": {
      "description": "Artifact created",
      "type": "object",
      "properties": {
        "artifactUploadUrl": {
          "description": "URL to upload the artifact to",
          "type": "string"
        }
      }
    },
    "DaemonKubernetesDeploymentWebhookRequest": {
      "description": "Daemon webhook with kubernetes deployment event",
      "type": "object",
      "properties": {
        "artifactId": {
          "type": "string"
        },
        "authorEmail": {
          "type": "string"
        },
        "availablePods": {
          "type": "integer"
        },
        "desiredPods": {
          "type": "integer"
        },
        "environment": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        }
      }
    },
    "DaemonKubernetesErrorWebhookRequest": {
      "description": "Daemon webhook with kubernetes error event",
      "type": "object",
      "properties": {
        "artifactId": {
          "type": "string"
        },
        "authorEmail": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DaemonKubernetesErrorWebhookRequestErrorsItems0"
          }
        },
        "namespace": {
          "type": "string"
        },
        "podName": {
          "type": "string"
        }
      }
    },
    "DaemonKubernetesErrorWebhookRequestErrorsItems0": {
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "DaemonKubernetesJobErrorWebhookRequest": {
      "description": "Daemon webhook with kubernetes job error event",
      "type": "object",
      "properties": {
        "artifactId": {
          "type": "string"
        },
        "authorEmail": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DaemonKubernetesJobErrorWebhookRequestErrorsItems0"
          }
        },
        "jobName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "DaemonKubernetesJobErrorWebhookRequestErrorsItems0": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "DeletePoliciesResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "DeletePolicyRequest": {
      "description": "Policies to delete",
      "type": "object",
      "required": [
        "service",
        "committerName",
        "committerEmail",
        "policyIds"
      ],
      "properties": {
        "committerEmail": {
          "type": "string"
        },
        "committerName": {
          "type": "string"
        },
        "policyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "service": {
          "type": "string"
        }
      }
    },
    "DescribeArtifactResponse": {
      "description": "Description of artifacts",
      "type": "object",
      "properties": {
        "artifacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Artifact"
          }
        },
        "service": {
          "type": "string"
        }
      }
    },
    "DescribeReleaseResponse": {
      "description": "Description of releases in an environment",
      "type": "object",
      "properties": {
        "environment": {
          "type": "string"
        },
        "releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DescribeReleaseResponseReleasesItems0"
          }
        },
        "service": {
          "type": "string"
        }
      }
    },
    "DescribeReleaseResponseReleasesItems0": {
      "type": "object",
      "properties": {
        "artifact": {
          "$ref": "#/definitions/Artifact"
        },
        "intent": {
          "$ref": "#/definitions/Intent"
        },
        "releaseIndex": {
          "type": "integer"
        },
        "releasedAt": {
          "type": "string",
          "format": "date"
        },
        "releasedByEmail": {
          "type": "string"
        },
        "releasedByName": {
          "type": "string"
        }
      }
    },
    "EmptyWebhookResponse": {
      "description": "Daemo webhook processed",
      "type": "object"
    },
    "EnvironmentStatus": {
      "type": "object",
      "properties": {
        "author": {
          "type": "string"
        },
        "buildUrl": {
          "type": "string"
        },
        "committer": {
          "type": "string"
        },
        "date": {
          "description": "Epoch timestamp",
          "type": "integer"
        },
        "highVulnerabilities": {
          "type": "integer"
        },
        "lowVulnerabilities": {
          "type": "integer"
        },
        "mediumVulnerabilities": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "description": "Generic error response",
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        }
      }
    },
    "GetPoliciesResponse": {
      "description": "List of policies on a service",
      "properties": {
        "autoReleases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetPoliciesResponseAutoReleasesItems0"
          }
        },
        "branchRestrictions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetPoliciesResponseBranchRestrictionsItems0"
          }
        },
        "service": {
          "type": "string"
        }
      }
    },
    "GetPoliciesResponseAutoReleasesItems0": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "GetPoliciesResponseBranchRestrictionsItems0": {
      "type": "object",
      "properties": {
        "branchRegex": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "Intent": {
      "description": "An action intent",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "promote": {
          "type": "object",
          "properties": {
            "fromEnvironment": {
              "type": "string"
            }
          }
        },
        "releaseBranch": {
          "type": "object",
          "properties": {
            "branch": {
              "type": "string"
            }
          }
        },
        "rollback": {
          "type": "object",
          "properties": {
            "previousArtifactId": {
              "type": "string"
            }
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "IntentPromote": {
      "type": "object",
      "properties": {
        "fromEnvironment": {
          "type": "string"
        }
      }
    },
    "IntentReleaseBranch": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        }
      }
    },
    "IntentRollback": {
      "type": "object",
      "properties": {
        "previousArtifactId": {
          "type": "string"
        }
      }
    },
    "ReleaseRequest": {
      "description": "A release to perform",
      "required": [
        "service",
        "environment",
        "committerName",
        "committerEmail",
        "artifactId"
      ],
      "properties": {
        "artifactId": {
          "type": "string"
        },
        "committerEmail": {
          "type": "string"
        },
        "committerName": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "intent": {
          "$ref": "#/definitions/Intent"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "ReleaseResponse": {
      "description": "Result of a release request",
      "type": "object",
      "properties": {
        "releaseId": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "toEnvironment": {
          "type": "string"
        }
      }
    },
    "Repository": {
      "description": "Git repository details",
      "type": "object",
      "properties": {
        "authorEmail": {
          "type": "string"
        },
        "authorName": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "committerEmail": {
          "type": "string"
        },
        "committerName": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "StatusResponse": {
      "description": "Current releases for a service",
      "type": "object",
      "properties": {
        "defaultNamespaces": {
          "type": "boolean"
        },
        "dev": {
          "$ref": "#/definitions/EnvironmentStatus"
        },
        "prod": {
          "$ref": "#/definitions/EnvironmentStatus"
        },
        "staging": {
          "$ref": "#/definitions/EnvironmentStatus"
        }
      }
    }
  },
  "responses": {
    "AccessTokenNotFound": {
      "description": "The provided access token was not found.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  },
  "securityDefinitions": {
    "artifactAuthorizationToken": {
      "description": "Authorization token formatted as 'Bearer \u003ctoken\u003e'",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "daemonAuthorizationToken": {
      "description": "Authorization token formatted as 'Bearer \u003ctoken\u003e'",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "hamctlAuthorizationToken": {
      "description": "Authorization token formatted as 'Bearer \u003ctoken\u003e'",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "hamctlAuthorizationToken": []
    }
  ],
  "tags": [
    {
      "name": "policies"
    },
    {
      "name": "status"
    },
    {
      "name": "webhook"
    },
    {
      "name": "release"
    },
    {
      "name": "internal"
    }
  ]
}`))
}
