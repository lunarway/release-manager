// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/lunarway/release-manager/generated/http/models"
)

// PostWebhookGithubOKCode is the HTTP code returned for type PostWebhookGithubOK
const PostWebhookGithubOKCode int = 200

/*PostWebhookGithubOK OK

swagger:response postWebhookGithubOK
*/
type PostWebhookGithubOK struct {
}

// NewPostWebhookGithubOK creates PostWebhookGithubOK with default headers values
func NewPostWebhookGithubOK() *PostWebhookGithubOK {

	return &PostWebhookGithubOK{}
}

// WriteResponse to the client
func (o *PostWebhookGithubOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PostWebhookGithubBadRequestCode is the HTTP code returned for type PostWebhookGithubBadRequest
const PostWebhookGithubBadRequestCode int = 400

/*PostWebhookGithubBadRequest Invalid payload

swagger:response postWebhookGithubBadRequest
*/
type PostWebhookGithubBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPostWebhookGithubBadRequest creates PostWebhookGithubBadRequest with default headers values
func NewPostWebhookGithubBadRequest() *PostWebhookGithubBadRequest {

	return &PostWebhookGithubBadRequest{}
}

// WithPayload adds the payload to the post webhook github bad request response
func (o *PostWebhookGithubBadRequest) WithPayload(payload *models.ErrorResponse) *PostWebhookGithubBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post webhook github bad request response
func (o *PostWebhookGithubBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostWebhookGithubBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
