// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostWebhookGithubHandlerFunc turns a function with the right signature into a post webhook github handler
type PostWebhookGithubHandlerFunc func(PostWebhookGithubParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostWebhookGithubHandlerFunc) Handle(params PostWebhookGithubParams) middleware.Responder {
	return fn(params)
}

// PostWebhookGithubHandler interface for that can handle valid post webhook github params
type PostWebhookGithubHandler interface {
	Handle(PostWebhookGithubParams) middleware.Responder
}

// NewPostWebhookGithub creates a new http.Handler for the post webhook github operation
func NewPostWebhookGithub(ctx *middleware.Context, handler PostWebhookGithubHandler) *PostWebhookGithub {
	return &PostWebhookGithub{Context: ctx, Handler: handler}
}

/* PostWebhookGithub swagger:route POST /webhook/github webhook postWebhookGithub

GitHub webhook endpoint. This is modeled after the GitHub webhook API. See payloads at https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads


*/
type PostWebhookGithub struct {
	Context *middleware.Context
	Handler PostWebhookGithubHandler
}

func (o *PostWebhookGithub) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostWebhookGithubParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
