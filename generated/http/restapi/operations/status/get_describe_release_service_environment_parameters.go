// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDescribeReleaseServiceEnvironmentParams creates a new GetDescribeReleaseServiceEnvironmentParams object
// with the default values initialized.
func NewGetDescribeReleaseServiceEnvironmentParams() GetDescribeReleaseServiceEnvironmentParams {

	var (
		// initialize parameters with default values

		countDefault = int64(1)
	)

	return GetDescribeReleaseServiceEnvironmentParams{
		Count: &countDefault,
	}
}

// GetDescribeReleaseServiceEnvironmentParams contains all the bound params for the get describe release service environment operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetDescribeReleaseServiceEnvironment
type GetDescribeReleaseServiceEnvironmentParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Number of releases to return
	  In: query
	  Default: 1
	*/
	Count *int64
	/*Environment to get release for
	  Required: true
	  In: path
	*/
	Environment string
	/*Namespace to find service in
	  In: query
	*/
	Namespace *string
	/*Service to find releases for
	  Required: true
	  In: path
	*/
	Service string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetDescribeReleaseServiceEnvironmentParams() beforehand.
func (o *GetDescribeReleaseServiceEnvironmentParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCount, qhkCount, _ := qs.GetOK("count")
	if err := o.bindCount(qCount, qhkCount, route.Formats); err != nil {
		res = append(res, err)
	}

	rEnvironment, rhkEnvironment, _ := route.Params.GetOK("environment")
	if err := o.bindEnvironment(rEnvironment, rhkEnvironment, route.Formats); err != nil {
		res = append(res, err)
	}

	qNamespace, qhkNamespace, _ := qs.GetOK("namespace")
	if err := o.bindNamespace(qNamespace, qhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	rService, rhkService, _ := route.Params.GetOK("service")
	if err := o.bindService(rService, rhkService, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCount binds and validates parameter Count from query.
func (o *GetDescribeReleaseServiceEnvironmentParams) bindCount(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetDescribeReleaseServiceEnvironmentParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("count", "query", "int64", raw)
	}
	o.Count = &value

	return nil
}

// bindEnvironment binds and validates parameter Environment from path.
func (o *GetDescribeReleaseServiceEnvironmentParams) bindEnvironment(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Environment = raw

	return nil
}

// bindNamespace binds and validates parameter Namespace from query.
func (o *GetDescribeReleaseServiceEnvironmentParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Namespace = &raw

	return nil
}

// bindService binds and validates parameter Service from path.
func (o *GetDescribeReleaseServiceEnvironmentParams) bindService(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Service = raw

	return nil
}
