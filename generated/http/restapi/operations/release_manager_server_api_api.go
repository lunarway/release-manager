// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/lunarway/release-manager/generated/http/restapi/operations/internal_swagger"
	"github.com/lunarway/release-manager/generated/http/restapi/operations/policies"
	"github.com/lunarway/release-manager/generated/http/restapi/operations/release"
	"github.com/lunarway/release-manager/generated/http/restapi/operations/status"
	"github.com/lunarway/release-manager/generated/http/restapi/operations/webhook"
)

// NewReleaseManagerServerAPIAPI creates a new ReleaseManagerServerAPI instance
func NewReleaseManagerServerAPIAPI(spec *loads.Document) *ReleaseManagerServerAPIAPI {
	return &ReleaseManagerServerAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),
		TxtProducer:  runtime.TextProducer(),

		PoliciesDeletePoliciesHandler: policies.DeletePoliciesHandlerFunc(func(params policies.DeletePoliciesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation policies.DeletePolicies has not yet been implemented")
		}),
		StatusGetDescribeArtifactServiceHandler: status.GetDescribeArtifactServiceHandlerFunc(func(params status.GetDescribeArtifactServiceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation status.GetDescribeArtifactService has not yet been implemented")
		}),
		StatusGetDescribeLatestArtifactServiceHandler: status.GetDescribeLatestArtifactServiceHandlerFunc(func(params status.GetDescribeLatestArtifactServiceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation status.GetDescribeLatestArtifactService has not yet been implemented")
		}),
		StatusGetDescribeReleaseServiceEnvironmentHandler: status.GetDescribeReleaseServiceEnvironmentHandlerFunc(func(params status.GetDescribeReleaseServiceEnvironmentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation status.GetDescribeReleaseServiceEnvironment has not yet been implemented")
		}),
		InternalSwaggerGetPingHandler: internal_swagger.GetPingHandlerFunc(func(params internal_swagger.GetPingParams) middleware.Responder {
			return middleware.NotImplemented("operation internal_swagger.GetPing has not yet been implemented")
		}),
		PoliciesGetPoliciesHandler: policies.GetPoliciesHandlerFunc(func(params policies.GetPoliciesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation policies.GetPolicies has not yet been implemented")
		}),
		StatusGetStatusHandler: status.GetStatusHandlerFunc(func(params status.GetStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation status.GetStatus has not yet been implemented")
		}),
		PoliciesPatchPolicyAutoReleaseHandler: policies.PatchPolicyAutoReleaseHandlerFunc(func(params policies.PatchPolicyAutoReleaseParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation policies.PatchPolicyAutoRelease has not yet been implemented")
		}),
		PoliciesPatchPolicyBranchRestrictionHandler: policies.PatchPolicyBranchRestrictionHandlerFunc(func(params policies.PatchPolicyBranchRestrictionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation policies.PatchPolicyBranchRestriction has not yet been implemented")
		}),
		ReleasePostArtifactCreateHandler: release.PostArtifactCreateHandlerFunc(func(params release.PostArtifactCreateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation release.PostArtifactCreate has not yet been implemented")
		}),
		ReleasePostReleaseHandler: release.PostReleaseHandlerFunc(func(params release.PostReleaseParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation release.PostRelease has not yet been implemented")
		}),
		WebhookPostWebhookDaemonK8sDeployHandler: webhook.PostWebhookDaemonK8sDeployHandlerFunc(func(params webhook.PostWebhookDaemonK8sDeployParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation webhook.PostWebhookDaemonK8sDeploy has not yet been implemented")
		}),
		WebhookPostWebhookDaemonK8sErrorHandler: webhook.PostWebhookDaemonK8sErrorHandlerFunc(func(params webhook.PostWebhookDaemonK8sErrorParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation webhook.PostWebhookDaemonK8sError has not yet been implemented")
		}),
		WebhookPostWebhookDaemonK8sJoberrorHandler: webhook.PostWebhookDaemonK8sJoberrorHandlerFunc(func(params webhook.PostWebhookDaemonK8sJoberrorParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation webhook.PostWebhookDaemonK8sJoberror has not yet been implemented")
		}),
		WebhookPostWebhookGithubHandler: webhook.PostWebhookGithubHandlerFunc(func(params webhook.PostWebhookGithubParams) middleware.Responder {
			return middleware.NotImplemented("operation webhook.PostWebhookGithub has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		ArtifactAuthorizationTokenAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (artifactAuthorizationToken) Authorization from header param [Authorization] has not yet been implemented")
		},
		// Applies when the "Authorization" header is set
		DaemonAuthorizationTokenAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (daemonAuthorizationToken) Authorization from header param [Authorization] has not yet been implemented")
		},
		// Applies when the "Authorization" header is set
		HamctlAuthorizationTokenAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (hamctlAuthorizationToken) Authorization from header param [Authorization] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*ReleaseManagerServerAPIAPI HTTP API for the server component of release-manager. */
type ReleaseManagerServerAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer
	// TxtProducer registers a producer for the following mime types:
	//   - text/plain
	TxtProducer runtime.Producer

	// ArtifactAuthorizationTokenAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	ArtifactAuthorizationTokenAuth func(string) (interface{}, error)

	// DaemonAuthorizationTokenAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	DaemonAuthorizationTokenAuth func(string) (interface{}, error)

	// HamctlAuthorizationTokenAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	HamctlAuthorizationTokenAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// PoliciesDeletePoliciesHandler sets the operation handler for the delete policies operation
	PoliciesDeletePoliciesHandler policies.DeletePoliciesHandler
	// StatusGetDescribeArtifactServiceHandler sets the operation handler for the get describe artifact service operation
	StatusGetDescribeArtifactServiceHandler status.GetDescribeArtifactServiceHandler
	// StatusGetDescribeLatestArtifactServiceHandler sets the operation handler for the get describe latest artifact service operation
	StatusGetDescribeLatestArtifactServiceHandler status.GetDescribeLatestArtifactServiceHandler
	// StatusGetDescribeReleaseServiceEnvironmentHandler sets the operation handler for the get describe release service environment operation
	StatusGetDescribeReleaseServiceEnvironmentHandler status.GetDescribeReleaseServiceEnvironmentHandler
	// InternalSwaggerGetPingHandler sets the operation handler for the get ping operation
	InternalSwaggerGetPingHandler internal_swagger.GetPingHandler
	// PoliciesGetPoliciesHandler sets the operation handler for the get policies operation
	PoliciesGetPoliciesHandler policies.GetPoliciesHandler
	// StatusGetStatusHandler sets the operation handler for the get status operation
	StatusGetStatusHandler status.GetStatusHandler
	// PoliciesPatchPolicyAutoReleaseHandler sets the operation handler for the patch policy auto release operation
	PoliciesPatchPolicyAutoReleaseHandler policies.PatchPolicyAutoReleaseHandler
	// PoliciesPatchPolicyBranchRestrictionHandler sets the operation handler for the patch policy branch restriction operation
	PoliciesPatchPolicyBranchRestrictionHandler policies.PatchPolicyBranchRestrictionHandler
	// ReleasePostArtifactCreateHandler sets the operation handler for the post artifact create operation
	ReleasePostArtifactCreateHandler release.PostArtifactCreateHandler
	// ReleasePostReleaseHandler sets the operation handler for the post release operation
	ReleasePostReleaseHandler release.PostReleaseHandler
	// WebhookPostWebhookDaemonK8sDeployHandler sets the operation handler for the post webhook daemon k8s deploy operation
	WebhookPostWebhookDaemonK8sDeployHandler webhook.PostWebhookDaemonK8sDeployHandler
	// WebhookPostWebhookDaemonK8sErrorHandler sets the operation handler for the post webhook daemon k8s error operation
	WebhookPostWebhookDaemonK8sErrorHandler webhook.PostWebhookDaemonK8sErrorHandler
	// WebhookPostWebhookDaemonK8sJoberrorHandler sets the operation handler for the post webhook daemon k8s joberror operation
	WebhookPostWebhookDaemonK8sJoberrorHandler webhook.PostWebhookDaemonK8sJoberrorHandler
	// WebhookPostWebhookGithubHandler sets the operation handler for the post webhook github operation
	WebhookPostWebhookGithubHandler webhook.PostWebhookGithubHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *ReleaseManagerServerAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *ReleaseManagerServerAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *ReleaseManagerServerAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ReleaseManagerServerAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ReleaseManagerServerAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ReleaseManagerServerAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ReleaseManagerServerAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ReleaseManagerServerAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ReleaseManagerServerAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ReleaseManagerServerAPIAPI
func (o *ReleaseManagerServerAPIAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}
	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.ArtifactAuthorizationTokenAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}
	if o.DaemonAuthorizationTokenAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}
	if o.HamctlAuthorizationTokenAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.PoliciesDeletePoliciesHandler == nil {
		unregistered = append(unregistered, "policies.DeletePoliciesHandler")
	}
	if o.StatusGetDescribeArtifactServiceHandler == nil {
		unregistered = append(unregistered, "status.GetDescribeArtifactServiceHandler")
	}
	if o.StatusGetDescribeLatestArtifactServiceHandler == nil {
		unregistered = append(unregistered, "status.GetDescribeLatestArtifactServiceHandler")
	}
	if o.StatusGetDescribeReleaseServiceEnvironmentHandler == nil {
		unregistered = append(unregistered, "status.GetDescribeReleaseServiceEnvironmentHandler")
	}
	if o.InternalSwaggerGetPingHandler == nil {
		unregistered = append(unregistered, "internal_swagger.GetPingHandler")
	}
	if o.PoliciesGetPoliciesHandler == nil {
		unregistered = append(unregistered, "policies.GetPoliciesHandler")
	}
	if o.StatusGetStatusHandler == nil {
		unregistered = append(unregistered, "status.GetStatusHandler")
	}
	if o.PoliciesPatchPolicyAutoReleaseHandler == nil {
		unregistered = append(unregistered, "policies.PatchPolicyAutoReleaseHandler")
	}
	if o.PoliciesPatchPolicyBranchRestrictionHandler == nil {
		unregistered = append(unregistered, "policies.PatchPolicyBranchRestrictionHandler")
	}
	if o.ReleasePostArtifactCreateHandler == nil {
		unregistered = append(unregistered, "release.PostArtifactCreateHandler")
	}
	if o.ReleasePostReleaseHandler == nil {
		unregistered = append(unregistered, "release.PostReleaseHandler")
	}
	if o.WebhookPostWebhookDaemonK8sDeployHandler == nil {
		unregistered = append(unregistered, "webhook.PostWebhookDaemonK8sDeployHandler")
	}
	if o.WebhookPostWebhookDaemonK8sErrorHandler == nil {
		unregistered = append(unregistered, "webhook.PostWebhookDaemonK8sErrorHandler")
	}
	if o.WebhookPostWebhookDaemonK8sJoberrorHandler == nil {
		unregistered = append(unregistered, "webhook.PostWebhookDaemonK8sJoberrorHandler")
	}
	if o.WebhookPostWebhookGithubHandler == nil {
		unregistered = append(unregistered, "webhook.PostWebhookGithubHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ReleaseManagerServerAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ReleaseManagerServerAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "artifactAuthorizationToken":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.ArtifactAuthorizationTokenAuth)

		case "daemonAuthorizationToken":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.DaemonAuthorizationTokenAuth)

		case "hamctlAuthorizationToken":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.HamctlAuthorizationTokenAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *ReleaseManagerServerAPIAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *ReleaseManagerServerAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *ReleaseManagerServerAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		case "text/plain":
			result["text/plain"] = o.TxtProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ReleaseManagerServerAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the release manager server API API
func (o *ReleaseManagerServerAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ReleaseManagerServerAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/policies"] = policies.NewDeletePolicies(o.context, o.PoliciesDeletePoliciesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/describe/artifact/{service}"] = status.NewGetDescribeArtifactService(o.context, o.StatusGetDescribeArtifactServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/describe/latest-artifact/{service}"] = status.NewGetDescribeLatestArtifactService(o.context, o.StatusGetDescribeLatestArtifactServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/describe/release/{service}/{environment}"] = status.NewGetDescribeReleaseServiceEnvironment(o.context, o.StatusGetDescribeReleaseServiceEnvironmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ping"] = internal_swagger.NewGetPing(o.context, o.InternalSwaggerGetPingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/policies"] = policies.NewGetPolicies(o.context, o.PoliciesGetPoliciesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status"] = status.NewGetStatus(o.context, o.StatusGetStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/policy/auto-release"] = policies.NewPatchPolicyAutoRelease(o.context, o.PoliciesPatchPolicyAutoReleaseHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/policy/branch-restriction"] = policies.NewPatchPolicyBranchRestriction(o.context, o.PoliciesPatchPolicyBranchRestrictionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/artifact/create"] = release.NewPostArtifactCreate(o.context, o.ReleasePostArtifactCreateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/release"] = release.NewPostRelease(o.context, o.ReleasePostReleaseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/webhook/daemon/k8s/deploy"] = webhook.NewPostWebhookDaemonK8sDeploy(o.context, o.WebhookPostWebhookDaemonK8sDeployHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/webhook/daemon/k8s/error"] = webhook.NewPostWebhookDaemonK8sError(o.context, o.WebhookPostWebhookDaemonK8sErrorHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/webhook/daemon/k8s/joberror"] = webhook.NewPostWebhookDaemonK8sJoberror(o.context, o.WebhookPostWebhookDaemonK8sJoberrorHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/webhook/github"] = webhook.NewPostWebhookGithub(o.context, o.WebhookPostWebhookGithubHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ReleaseManagerServerAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ReleaseManagerServerAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ReleaseManagerServerAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ReleaseManagerServerAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *ReleaseManagerServerAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
