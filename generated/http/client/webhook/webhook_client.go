// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new webhook API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for webhook API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PostWebhookDaemonK8sDeploy(params *PostWebhookDaemonK8sDeployParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWebhookDaemonK8sDeployOK, error)

	PostWebhookDaemonK8sError(params *PostWebhookDaemonK8sErrorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWebhookDaemonK8sErrorOK, error)

	PostWebhookDaemonK8sJoberror(params *PostWebhookDaemonK8sJoberrorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWebhookDaemonK8sJoberrorOK, error)

	PostWebhookGithub(params *PostWebhookGithubParams, opts ...ClientOption) (*PostWebhookGithubOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PostWebhookDaemonK8sDeploy Daemon webhook for kubernetes deployment events
*/
func (a *Client) PostWebhookDaemonK8sDeploy(params *PostWebhookDaemonK8sDeployParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWebhookDaemonK8sDeployOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWebhookDaemonK8sDeployParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWebhookDaemonK8sDeploy",
		Method:             "POST",
		PathPattern:        "/webhook/daemon/k8s/deploy",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostWebhookDaemonK8sDeployReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWebhookDaemonK8sDeployOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWebhookDaemonK8sDeploy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostWebhookDaemonK8sError Daemon webhook for kubernetes error events
*/
func (a *Client) PostWebhookDaemonK8sError(params *PostWebhookDaemonK8sErrorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWebhookDaemonK8sErrorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWebhookDaemonK8sErrorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWebhookDaemonK8sError",
		Method:             "POST",
		PathPattern:        "/webhook/daemon/k8s/error",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostWebhookDaemonK8sErrorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWebhookDaemonK8sErrorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWebhookDaemonK8sError: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostWebhookDaemonK8sJoberror Daemon webhook for kubernetes job error events
*/
func (a *Client) PostWebhookDaemonK8sJoberror(params *PostWebhookDaemonK8sJoberrorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWebhookDaemonK8sJoberrorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWebhookDaemonK8sJoberrorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWebhookDaemonK8sJoberror",
		Method:             "POST",
		PathPattern:        "/webhook/daemon/k8s/joberror",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostWebhookDaemonK8sJoberrorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWebhookDaemonK8sJoberrorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWebhookDaemonK8sJoberror: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostWebhookGithub GitHub webhook endpoint. This is modeled after the GitHub webhook API. See payloads at https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads

*/
func (a *Client) PostWebhookGithub(params *PostWebhookGithubParams, opts ...ClientOption) (*PostWebhookGithubOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWebhookGithubParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWebhookGithub",
		Method:             "POST",
		PathPattern:        "/webhook/github",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostWebhookGithubReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWebhookGithubOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWebhookGithub: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
