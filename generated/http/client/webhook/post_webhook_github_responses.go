// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/lunarway/release-manager/generated/http/models"
)

// PostWebhookGithubReader is a Reader for the PostWebhookGithub structure.
type PostWebhookGithubReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostWebhookGithubReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostWebhookGithubOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostWebhookGithubBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostWebhookGithubOK creates a PostWebhookGithubOK with default headers values
func NewPostWebhookGithubOK() *PostWebhookGithubOK {
	return &PostWebhookGithubOK{}
}

/* PostWebhookGithubOK describes a response with status code 200, with default header values.

OK
*/
type PostWebhookGithubOK struct {
}

func (o *PostWebhookGithubOK) Error() string {
	return fmt.Sprintf("[POST /webhook/github][%d] postWebhookGithubOK ", 200)
}

func (o *PostWebhookGithubOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostWebhookGithubBadRequest creates a PostWebhookGithubBadRequest with default headers values
func NewPostWebhookGithubBadRequest() *PostWebhookGithubBadRequest {
	return &PostWebhookGithubBadRequest{}
}

/* PostWebhookGithubBadRequest describes a response with status code 400, with default header values.

Invalid payload
*/
type PostWebhookGithubBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PostWebhookGithubBadRequest) Error() string {
	return fmt.Sprintf("[POST /webhook/github][%d] postWebhookGithubBadRequest  %+v", 400, o.Payload)
}
func (o *PostWebhookGithubBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostWebhookGithubBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
