// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeletePolicies(params *DeletePoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePoliciesOK, error)

	GetPolicies(params *GetPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPoliciesOK, error)

	PatchPolicyAutoRelease(params *PatchPolicyAutoReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchPolicyAutoReleaseCreated, error)

	PatchPolicyBranchRestriction(params *PatchPolicyBranchRestrictionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchPolicyBranchRestrictionCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeletePolicies Delete one or more policies for a service
*/
func (a *Client) DeletePolicies(params *DeletePoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePolicies",
		Method:             "DELETE",
		PathPattern:        "/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPolicies Get policies for a service
*/
func (a *Client) GetPolicies(params *GetPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPolicies",
		Method:             "GET",
		PathPattern:        "/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchPolicyAutoRelease Apply an auto-release policy
*/
func (a *Client) PatchPolicyAutoRelease(params *PatchPolicyAutoReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchPolicyAutoReleaseCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPolicyAutoReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchPolicyAutoRelease",
		Method:             "PATCH",
		PathPattern:        "/policy/auto-release",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchPolicyAutoReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchPolicyAutoReleaseCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchPolicyAutoRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchPolicyBranchRestriction Apply a branch restriction policy
*/
func (a *Client) PatchPolicyBranchRestriction(params *PatchPolicyBranchRestrictionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchPolicyBranchRestrictionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPolicyBranchRestrictionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchPolicyBranchRestriction",
		Method:             "PATCH",
		PathPattern:        "/policy/branch-restriction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchPolicyBranchRestrictionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchPolicyBranchRestrictionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchPolicyBranchRestriction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
