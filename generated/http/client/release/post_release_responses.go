// Code generated by go-swagger; DO NOT EDIT.

package release

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/lunarway/release-manager/generated/http/models"
)

// PostReleaseReader is a Reader for the PostRelease structure.
type PostReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostReleaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostReleaseServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostReleaseOK creates a PostReleaseOK with default headers values
func NewPostReleaseOK() *PostReleaseOK {
	return &PostReleaseOK{}
}

/* PostReleaseOK describes a response with status code 200, with default header values.

OK
*/
type PostReleaseOK struct {

	/* Allowed origins
	 */
	AccessControlAllowOrigin string

	Payload *models.ReleaseResponse
}

func (o *PostReleaseOK) Error() string {
	return fmt.Sprintf("[POST /release][%d] postReleaseOK  %+v", 200, o.Payload)
}
func (o *PostReleaseOK) GetPayload() *models.ReleaseResponse {
	return o.Payload
}

func (o *PostReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Access-Control-Allow-Origin
	hdrAccessControlAllowOrigin := response.GetHeader("Access-Control-Allow-Origin")

	if hdrAccessControlAllowOrigin != "" {
		o.AccessControlAllowOrigin = hdrAccessControlAllowOrigin
	}

	o.Payload = new(models.ReleaseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostReleaseBadRequest creates a PostReleaseBadRequest with default headers values
func NewPostReleaseBadRequest() *PostReleaseBadRequest {
	return &PostReleaseBadRequest{}
}

/* PostReleaseBadRequest describes a response with status code 400, with default header values.

Invalid payload
*/
type PostReleaseBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PostReleaseBadRequest) Error() string {
	return fmt.Sprintf("[POST /release][%d] postReleaseBadRequest  %+v", 400, o.Payload)
}
func (o *PostReleaseBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostReleaseUnauthorized creates a PostReleaseUnauthorized with default headers values
func NewPostReleaseUnauthorized() *PostReleaseUnauthorized {
	return &PostReleaseUnauthorized{}
}

/* PostReleaseUnauthorized describes a response with status code 401, with default header values.

Provided access token was not found or is invalid
*/
type PostReleaseUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *PostReleaseUnauthorized) Error() string {
	return fmt.Sprintf("[POST /release][%d] postReleaseUnauthorized  %+v", 401, o.Payload)
}
func (o *PostReleaseUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostReleaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostReleaseInternalServerError creates a PostReleaseInternalServerError with default headers values
func NewPostReleaseInternalServerError() *PostReleaseInternalServerError {
	return &PostReleaseInternalServerError{}
}

/* PostReleaseInternalServerError describes a response with status code 500, with default header values.

Error response
*/
type PostReleaseInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *PostReleaseInternalServerError) Error() string {
	return fmt.Sprintf("[POST /release][%d] postReleaseInternalServerError  %+v", 500, o.Payload)
}
func (o *PostReleaseInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostReleaseServiceUnavailable creates a PostReleaseServiceUnavailable with default headers values
func NewPostReleaseServiceUnavailable() *PostReleaseServiceUnavailable {
	return &PostReleaseServiceUnavailable{}
}

/* PostReleaseServiceUnavailable describes a response with status code 503, with default header values.

Error response
*/
type PostReleaseServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *PostReleaseServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /release][%d] postReleaseServiceUnavailable  %+v", 503, o.Payload)
}
func (o *PostReleaseServiceUnavailable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostReleaseServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
