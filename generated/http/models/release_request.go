// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseRequest A release to perform
//
// swagger:model ReleaseRequest
type ReleaseRequest struct {

	// artifact Id
	// Required: true
	ArtifactID *string `json:"artifactId"`

	// committer email
	// Required: true
	CommitterEmail *string `json:"committerEmail"`

	// committer name
	// Required: true
	CommitterName *string `json:"committerName"`

	// environment
	// Required: true
	Environment *string `json:"environment"`

	// intent
	Intent *Intent `json:"intent,omitempty"`

	// service
	// Required: true
	Service *string `json:"service"`
}

// Validate validates this release request
func (m *ReleaseRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitterEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseRequest) validateArtifactID(formats strfmt.Registry) error {

	if err := validate.Required("artifactId", "body", m.ArtifactID); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseRequest) validateCommitterEmail(formats strfmt.Registry) error {

	if err := validate.Required("committerEmail", "body", m.CommitterEmail); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseRequest) validateCommitterName(formats strfmt.Registry) error {

	if err := validate.Required("committerName", "body", m.CommitterName); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseRequest) validateEnvironment(formats strfmt.Registry) error {

	if err := validate.Required("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseRequest) validateIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.Intent) { // not required
		return nil
	}

	if m.Intent != nil {
		if err := m.Intent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intent")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseRequest) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this release request based on the context it is used
func (m *ReleaseRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseRequest) contextValidateIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.Intent != nil {
		if err := m.Intent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseRequest) UnmarshalBinary(b []byte) error {
	var res ReleaseRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
