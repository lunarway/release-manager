// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DescribeReleaseResponse Description of releases in an environment
//
// swagger:model DescribeReleaseResponse
type DescribeReleaseResponse struct {

	// environment
	Environment string `json:"environment,omitempty"`

	// releases
	Releases []*DescribeReleaseResponseReleasesItems0 `json:"releases"`

	// service
	Service string `json:"service,omitempty"`
}

// Validate validates this describe release response
func (m *DescribeReleaseResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReleases(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DescribeReleaseResponse) validateReleases(formats strfmt.Registry) error {
	if swag.IsZero(m.Releases) { // not required
		return nil
	}

	for i := 0; i < len(m.Releases); i++ {
		if swag.IsZero(m.Releases[i]) { // not required
			continue
		}

		if m.Releases[i] != nil {
			if err := m.Releases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("releases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this describe release response based on the context it is used
func (m *DescribeReleaseResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReleases(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DescribeReleaseResponse) contextValidateReleases(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Releases); i++ {

		if m.Releases[i] != nil {
			if err := m.Releases[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("releases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DescribeReleaseResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DescribeReleaseResponse) UnmarshalBinary(b []byte) error {
	var res DescribeReleaseResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DescribeReleaseResponseReleasesItems0 describe release response releases items0
//
// swagger:model DescribeReleaseResponseReleasesItems0
type DescribeReleaseResponseReleasesItems0 struct {

	// artifact
	Artifact *Artifact `json:"artifact,omitempty"`

	// intent
	Intent *Intent `json:"intent,omitempty"`

	// release index
	ReleaseIndex int64 `json:"releaseIndex,omitempty"`

	// released at
	// Format: date
	ReleasedAt strfmt.Date `json:"releasedAt,omitempty"`

	// released by email
	ReleasedByEmail string `json:"releasedByEmail,omitempty"`

	// released by name
	ReleasedByName string `json:"releasedByName,omitempty"`
}

// Validate validates this describe release response releases items0
func (m *DescribeReleaseResponseReleasesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleasedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DescribeReleaseResponseReleasesItems0) validateArtifact(formats strfmt.Registry) error {
	if swag.IsZero(m.Artifact) { // not required
		return nil
	}

	if m.Artifact != nil {
		if err := m.Artifact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifact")
			}
			return err
		}
	}

	return nil
}

func (m *DescribeReleaseResponseReleasesItems0) validateIntent(formats strfmt.Registry) error {
	if swag.IsZero(m.Intent) { // not required
		return nil
	}

	if m.Intent != nil {
		if err := m.Intent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intent")
			}
			return err
		}
	}

	return nil
}

func (m *DescribeReleaseResponseReleasesItems0) validateReleasedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleasedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("releasedAt", "body", "date", m.ReleasedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this describe release response releases items0 based on the context it is used
func (m *DescribeReleaseResponseReleasesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArtifact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DescribeReleaseResponseReleasesItems0) contextValidateArtifact(ctx context.Context, formats strfmt.Registry) error {

	if m.Artifact != nil {
		if err := m.Artifact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifact")
			}
			return err
		}
	}

	return nil
}

func (m *DescribeReleaseResponseReleasesItems0) contextValidateIntent(ctx context.Context, formats strfmt.Registry) error {

	if m.Intent != nil {
		if err := m.Intent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intent")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DescribeReleaseResponseReleasesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DescribeReleaseResponseReleasesItems0) UnmarshalBinary(b []byte) error {
	var res DescribeReleaseResponseReleasesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
