// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StatusResponse Current releases for a service
//
// swagger:model StatusResponse
type StatusResponse struct {

	// default namespaces
	DefaultNamespaces bool `json:"defaultNamespaces,omitempty"`

	// dev
	Dev *EnvironmentStatus `json:"dev,omitempty"`

	// prod
	Prod *EnvironmentStatus `json:"prod,omitempty"`

	// staging
	Staging *EnvironmentStatus `json:"staging,omitempty"`
}

// Validate validates this status response
func (m *StatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDev(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaging(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusResponse) validateDev(formats strfmt.Registry) error {
	if swag.IsZero(m.Dev) { // not required
		return nil
	}

	if m.Dev != nil {
		if err := m.Dev.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dev")
			}
			return err
		}
	}

	return nil
}

func (m *StatusResponse) validateProd(formats strfmt.Registry) error {
	if swag.IsZero(m.Prod) { // not required
		return nil
	}

	if m.Prod != nil {
		if err := m.Prod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prod")
			}
			return err
		}
	}

	return nil
}

func (m *StatusResponse) validateStaging(formats strfmt.Registry) error {
	if swag.IsZero(m.Staging) { // not required
		return nil
	}

	if m.Staging != nil {
		if err := m.Staging.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("staging")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this status response based on the context it is used
func (m *StatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDev(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProd(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStaging(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusResponse) contextValidateDev(ctx context.Context, formats strfmt.Registry) error {

	if m.Dev != nil {
		if err := m.Dev.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dev")
			}
			return err
		}
	}

	return nil
}

func (m *StatusResponse) contextValidateProd(ctx context.Context, formats strfmt.Registry) error {

	if m.Prod != nil {
		if err := m.Prod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prod")
			}
			return err
		}
	}

	return nil
}

func (m *StatusResponse) contextValidateStaging(ctx context.Context, formats strfmt.Registry) error {

	if m.Staging != nil {
		if err := m.Staging.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("staging")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatusResponse) UnmarshalBinary(b []byte) error {
	var res StatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
