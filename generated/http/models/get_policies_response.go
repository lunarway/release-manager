// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetPoliciesResponse List of policies on a service
//
// swagger:model GetPoliciesResponse
type GetPoliciesResponse struct {

	// auto releases
	AutoReleases []*GetPoliciesResponseAutoReleasesItems0 `json:"autoReleases"`

	// branch restrictions
	BranchRestrictions []*GetPoliciesResponseBranchRestrictionsItems0 `json:"branchRestrictions"`

	// service
	Service string `json:"service,omitempty"`
}

// Validate validates this get policies response
func (m *GetPoliciesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoReleases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBranchRestrictions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetPoliciesResponse) validateAutoReleases(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoReleases) { // not required
		return nil
	}

	for i := 0; i < len(m.AutoReleases); i++ {
		if swag.IsZero(m.AutoReleases[i]) { // not required
			continue
		}

		if m.AutoReleases[i] != nil {
			if err := m.AutoReleases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("autoReleases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetPoliciesResponse) validateBranchRestrictions(formats strfmt.Registry) error {
	if swag.IsZero(m.BranchRestrictions) { // not required
		return nil
	}

	for i := 0; i < len(m.BranchRestrictions); i++ {
		if swag.IsZero(m.BranchRestrictions[i]) { // not required
			continue
		}

		if m.BranchRestrictions[i] != nil {
			if err := m.BranchRestrictions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("branchRestrictions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get policies response based on the context it is used
func (m *GetPoliciesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoReleases(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBranchRestrictions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetPoliciesResponse) contextValidateAutoReleases(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AutoReleases); i++ {

		if m.AutoReleases[i] != nil {
			if err := m.AutoReleases[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("autoReleases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetPoliciesResponse) contextValidateBranchRestrictions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BranchRestrictions); i++ {

		if m.BranchRestrictions[i] != nil {
			if err := m.BranchRestrictions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("branchRestrictions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetPoliciesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetPoliciesResponse) UnmarshalBinary(b []byte) error {
	var res GetPoliciesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetPoliciesResponseAutoReleasesItems0 get policies response auto releases items0
//
// swagger:model GetPoliciesResponseAutoReleasesItems0
type GetPoliciesResponseAutoReleasesItems0 struct {

	// branch
	Branch string `json:"branch,omitempty"`

	// environment
	Environment string `json:"environment,omitempty"`

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this get policies response auto releases items0
func (m *GetPoliciesResponseAutoReleasesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get policies response auto releases items0 based on context it is used
func (m *GetPoliciesResponseAutoReleasesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetPoliciesResponseAutoReleasesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetPoliciesResponseAutoReleasesItems0) UnmarshalBinary(b []byte) error {
	var res GetPoliciesResponseAutoReleasesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetPoliciesResponseBranchRestrictionsItems0 get policies response branch restrictions items0
//
// swagger:model GetPoliciesResponseBranchRestrictionsItems0
type GetPoliciesResponseBranchRestrictionsItems0 struct {

	// branch regex
	BranchRegex string `json:"branchRegex,omitempty"`

	// environment
	Environment string `json:"environment,omitempty"`

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this get policies response branch restrictions items0
func (m *GetPoliciesResponseBranchRestrictionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get policies response branch restrictions items0 based on context it is used
func (m *GetPoliciesResponseBranchRestrictionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetPoliciesResponseBranchRestrictionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetPoliciesResponseBranchRestrictionsItems0) UnmarshalBinary(b []byte) error {
	var res GetPoliciesResponseBranchRestrictionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
