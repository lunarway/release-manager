// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DaemonKubernetesErrorWebhookRequest Daemon webhook with kubernetes error event
//
// swagger:model DaemonKubernetesErrorWebhookRequest
type DaemonKubernetesErrorWebhookRequest struct {

	// artifact Id
	ArtifactID string `json:"artifactId,omitempty"`

	// author email
	AuthorEmail string `json:"authorEmail,omitempty"`

	// environment
	Environment string `json:"environment,omitempty"`

	// errors
	Errors []*DaemonKubernetesErrorWebhookRequestErrorsItems0 `json:"errors"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// pod name
	PodName string `json:"podName,omitempty"`
}

// Validate validates this daemon kubernetes error webhook request
func (m *DaemonKubernetesErrorWebhookRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DaemonKubernetesErrorWebhookRequest) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this daemon kubernetes error webhook request based on the context it is used
func (m *DaemonKubernetesErrorWebhookRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DaemonKubernetesErrorWebhookRequest) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DaemonKubernetesErrorWebhookRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DaemonKubernetesErrorWebhookRequest) UnmarshalBinary(b []byte) error {
	var res DaemonKubernetesErrorWebhookRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DaemonKubernetesErrorWebhookRequestErrorsItems0 daemon kubernetes error webhook request errors items0
//
// swagger:model DaemonKubernetesErrorWebhookRequestErrorsItems0
type DaemonKubernetesErrorWebhookRequestErrorsItems0 struct {

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this daemon kubernetes error webhook request errors items0
func (m *DaemonKubernetesErrorWebhookRequestErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this daemon kubernetes error webhook request errors items0 based on context it is used
func (m *DaemonKubernetesErrorWebhookRequestErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DaemonKubernetesErrorWebhookRequestErrorsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DaemonKubernetesErrorWebhookRequestErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DaemonKubernetesErrorWebhookRequestErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
