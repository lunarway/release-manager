// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Artifact An artifact specification
//
// swagger:model Artifact
type Artifact struct {

	// application
	Application *Repository `json:"application,omitempty"`

	// ci
	Ci *ArtifactCi `json:"ci,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// service
	Service string `json:"service,omitempty"`

	// shuttle
	Shuttle *ArtifactShuttle `json:"shuttle,omitempty"`

	// squad
	Squad string `json:"squad,omitempty"`
}

// Validate validates this artifact
func (m *Artifact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShuttle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Artifact) validateApplication(formats strfmt.Registry) error {
	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *Artifact) validateCi(formats strfmt.Registry) error {
	if swag.IsZero(m.Ci) { // not required
		return nil
	}

	if m.Ci != nil {
		if err := m.Ci.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ci")
			}
			return err
		}
	}

	return nil
}

func (m *Artifact) validateShuttle(formats strfmt.Registry) error {
	if swag.IsZero(m.Shuttle) { // not required
		return nil
	}

	if m.Shuttle != nil {
		if err := m.Shuttle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shuttle")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this artifact based on the context it is used
func (m *Artifact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCi(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShuttle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Artifact) contextValidateApplication(ctx context.Context, formats strfmt.Registry) error {

	if m.Application != nil {
		if err := m.Application.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *Artifact) contextValidateCi(ctx context.Context, formats strfmt.Registry) error {

	if m.Ci != nil {
		if err := m.Ci.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ci")
			}
			return err
		}
	}

	return nil
}

func (m *Artifact) contextValidateShuttle(ctx context.Context, formats strfmt.Registry) error {

	if m.Shuttle != nil {
		if err := m.Shuttle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shuttle")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Artifact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Artifact) UnmarshalBinary(b []byte) error {
	var res Artifact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ArtifactCi artifact ci
//
// swagger:model ArtifactCi
type ArtifactCi struct {

	// end
	End string `json:"end,omitempty"`

	// job Url
	JobURL string `json:"jobUrl,omitempty"`

	// start
	Start string `json:"start,omitempty"`
}

// Validate validates this artifact ci
func (m *ArtifactCi) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this artifact ci based on context it is used
func (m *ArtifactCi) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactCi) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactCi) UnmarshalBinary(b []byte) error {
	var res ArtifactCi
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ArtifactShuttle artifact shuttle
//
// swagger:model ArtifactShuttle
type ArtifactShuttle struct {

	// plan
	Plan *Repository `json:"plan,omitempty"`

	// shuttle version
	ShuttleVersion string `json:"shuttleVersion,omitempty"`
}

// Validate validates this artifact shuttle
func (m *ArtifactShuttle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactShuttle) validatePlan(formats strfmt.Registry) error {
	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {
		if err := m.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shuttle" + "." + "plan")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this artifact shuttle based on the context it is used
func (m *ArtifactShuttle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactShuttle) contextValidatePlan(ctx context.Context, formats strfmt.Registry) error {

	if m.Plan != nil {
		if err := m.Plan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shuttle" + "." + "plan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactShuttle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactShuttle) UnmarshalBinary(b []byte) error {
	var res ArtifactShuttle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
