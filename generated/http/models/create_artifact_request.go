// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateArtifactRequest Create artifact payload
//
// swagger:model CreateArtifactRequest
type CreateArtifactRequest struct {

	// artifact
	// Required: true
	Artifact *CreateArtifactRequestArtifact `json:"artifact"`

	// md5
	// Required: true
	Md5 *string `json:"md5"`
}

// Validate validates this create artifact request
func (m *CreateArtifactRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMd5(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateArtifactRequest) validateArtifact(formats strfmt.Registry) error {

	if err := validate.Required("artifact", "body", m.Artifact); err != nil {
		return err
	}

	if m.Artifact != nil {
		if err := m.Artifact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifact")
			}
			return err
		}
	}

	return nil
}

func (m *CreateArtifactRequest) validateMd5(formats strfmt.Registry) error {

	if err := validate.Required("md5", "body", m.Md5); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create artifact request based on the context it is used
func (m *CreateArtifactRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArtifact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateArtifactRequest) contextValidateArtifact(ctx context.Context, formats strfmt.Registry) error {

	if m.Artifact != nil {
		if err := m.Artifact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifact")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateArtifactRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateArtifactRequest) UnmarshalBinary(b []byte) error {
	var res CreateArtifactRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateArtifactRequestArtifact create artifact request artifact
//
// swagger:model CreateArtifactRequestArtifact
type CreateArtifactRequestArtifact struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// service
	// Required: true
	Service *string `json:"service"`
}

// Validate validates this create artifact request artifact
func (m *CreateArtifactRequestArtifact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateArtifactRequestArtifact) validateID(formats strfmt.Registry) error {

	if err := validate.Required("artifact"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CreateArtifactRequestArtifact) validateService(formats strfmt.Registry) error {

	if err := validate.Required("artifact"+"."+"service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create artifact request artifact based on context it is used
func (m *CreateArtifactRequestArtifact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateArtifactRequestArtifact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateArtifactRequestArtifact) UnmarshalBinary(b []byte) error {
	var res CreateArtifactRequestArtifact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
