// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ArtifactStageTest artifact stage test
//
// swagger:model ArtifactStageTest
type ArtifactStageTest struct {

	// data
	Data *ArtifactStageTestData `json:"data,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this artifact stage test
func (m *ArtifactStageTest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactStageTest) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this artifact stage test based on the context it is used
func (m *ArtifactStageTest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactStageTest) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactStageTest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactStageTest) UnmarshalBinary(b []byte) error {
	var res ArtifactStageTest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ArtifactStageTestData artifact stage test data
//
// swagger:model ArtifactStageTestData
type ArtifactStageTestData struct {

	// results
	Results *ArtifactStageTestDataResults `json:"results,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this artifact stage test data
func (m *ArtifactStageTestData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactStageTestData) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(m.Results) { // not required
		return nil
	}

	if m.Results != nil {
		if err := m.Results.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "results")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this artifact stage test data based on the context it is used
func (m *ArtifactStageTestData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactStageTestData) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	if m.Results != nil {
		if err := m.Results.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "results")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactStageTestData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactStageTestData) UnmarshalBinary(b []byte) error {
	var res ArtifactStageTestData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ArtifactStageTestDataResults artifact stage test data results
//
// swagger:model ArtifactStageTestDataResults
type ArtifactStageTestDataResults struct {

	// failed
	Failed int64 `json:"failed,omitempty"`

	// passed
	Passed int64 `json:"passed,omitempty"`

	// skipped
	Skipped int64 `json:"skipped,omitempty"`
}

// Validate validates this artifact stage test data results
func (m *ArtifactStageTestDataResults) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this artifact stage test data results based on context it is used
func (m *ArtifactStageTestDataResults) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactStageTestDataResults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactStageTestDataResults) UnmarshalBinary(b []byte) error {
	var res ArtifactStageTestDataResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
