// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ArtifactStageSnykCode artifact stage snyk code
//
// swagger:model ArtifactStageSnykCode
type ArtifactStageSnykCode struct {

	// data
	Data *ArtifactStageSnykCodeData `json:"data,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this artifact stage snyk code
func (m *ArtifactStageSnykCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactStageSnykCode) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this artifact stage snyk code based on the context it is used
func (m *ArtifactStageSnykCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactStageSnykCode) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactStageSnykCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactStageSnykCode) UnmarshalBinary(b []byte) error {
	var res ArtifactStageSnykCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ArtifactStageSnykCodeData artifact stage snyk code data
//
// swagger:model ArtifactStageSnykCodeData
type ArtifactStageSnykCodeData struct {

	// language
	Language string `json:"language,omitempty"`

	// snyk version
	SnykVersion string `json:"snykVersion,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// vulnerabilities
	Vulnerabilities *Vulnerabilities `json:"vulnerabilities,omitempty"`
}

// Validate validates this artifact stage snyk code data
func (m *ArtifactStageSnykCodeData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVulnerabilities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactStageSnykCodeData) validateVulnerabilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Vulnerabilities) { // not required
		return nil
	}

	if m.Vulnerabilities != nil {
		if err := m.Vulnerabilities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vulnerabilities")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this artifact stage snyk code data based on the context it is used
func (m *ArtifactStageSnykCodeData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVulnerabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactStageSnykCodeData) contextValidateVulnerabilities(ctx context.Context, formats strfmt.Registry) error {

	if m.Vulnerabilities != nil {
		if err := m.Vulnerabilities.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "vulnerabilities")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactStageSnykCodeData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactStageSnykCodeData) UnmarshalBinary(b []byte) error {
	var res ArtifactStageSnykCodeData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
