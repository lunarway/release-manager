// Code generated by mockery v2.5.1. DO NOT EDIT.

package slack

import (
	context "context"

	"github.com/nlopes/slack"
	mock "github.com/stretchr/testify/mock"
)

// MockSlackClient is an autogenerated mock type for the SlackClient type
type MockSlackClient struct {
	mock.Mock
}

// GetUserByEmailContext provides a mock function with given fields: ctx, email
func (_m *MockSlackClient) GetUserByEmailContext(ctx context.Context, email string) (*slack.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *slack.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *slack.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slack.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostMessage provides a mock function with given fields: channelID, options
func (_m *MockSlackClient) PostMessage(channelID string, options ...slack.MsgOption) (string, string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...slack.MsgOption) string); ok {
		r0 = rf(channelID, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, ...slack.MsgOption) string); ok {
		r1 = rf(channelID, options...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, ...slack.MsgOption) error); ok {
		r2 = rf(channelID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PostMessageContext provides a mock function with given fields: ctx, channelID, options
func (_m *MockSlackClient) PostMessageContext(ctx context.Context, channelID string, options ...slack.MsgOption) (string, string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, channelID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, ...slack.MsgOption) string); ok {
		r0 = rf(ctx, channelID, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, ...slack.MsgOption) string); ok {
		r1 = rf(ctx, channelID, options...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, ...slack.MsgOption) error); ok {
		r2 = rf(ctx, channelID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateMessage provides a mock function with given fields: channelID, timestamp, options
func (_m *MockSlackClient) UpdateMessage(channelID string, timestamp string, options ...slack.MsgOption) (string, string, string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID, timestamp)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, ...slack.MsgOption) string); ok {
		r0 = rf(channelID, timestamp, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string, ...slack.MsgOption) string); ok {
		r1 = rf(channelID, timestamp, options...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string, string, ...slack.MsgOption) string); ok {
		r2 = rf(channelID, timestamp, options...)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, string, ...slack.MsgOption) error); ok {
		r3 = rf(channelID, timestamp, options...)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
